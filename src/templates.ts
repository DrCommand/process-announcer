import { configs } from "./config";
const { NUM, BEGIN_TIME, END_TIME, DURATION, OWNER, NAME, LOCATION, LEADER, MEMBER, DETAILS } =
  configs;
function addReceiverReplyText(result: number | Array<number | string>) {
  return result === -1
    ? `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ Slot ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏ß‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏£‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡πâ‡∏≤üò¥`
    : `‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏á‡∏±‡∏öüòâ\nSlot ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ #${result[0]} ‡πÄ‡∏£‡∏¥‡πà‡∏° ${result[1]} ‡∏ô‡πâ‡∏≤`;
}
function generateSlotInfoText(slot: Array<any>, shift: number) {
  if (BEGIN_TIME !== -1 && shift !== 0) {
    slot[BEGIN_TIME] += ` (${shift >= 0 ? "+" : ""}${shift})`;
  }
  if (END_TIME !== -1 && shift !== 0) {
    slot[END_TIME] += ` (${shift >= 0 ? "+" : ""}${shift})`;
  }
  if (LOCATION !== -1) {
    slot[LOCATION] = slot[LOCATION].split("\n");
    slot[LOCATION] = `${slot[LOCATION][0]}${
      slot[LOCATION].length > 1 ? " ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å " + (slot[LOCATION].length - 1) + " ‡∏ó‡∏µ‡πà" : ""
    }`;
  }
  if (MEMBER !== -1) {
    slot[MEMBER] = slot[MEMBER].split("\n");
    slot[MEMBER] = `${slot[MEMBER][0]}${
      slot[MEMBER].length > 1 ? " ‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡∏Å " + (slot[MEMBER].length - 1) + " ‡∏Ñ‡∏ô" : ""
    }`;
  }
  if (DETAILS !== -1) {
    slot[DETAILS] = slot[DETAILS].split("\n");
    slot[DETAILS] = `${slot[DETAILS][0]}${slot[DETAILS].length > 1 ? "..." : ""}`;
  }
  return `${NUM !== -1 ? "#" + slot[NUM] : ""} ${
    BEGIN_TIME !== -1 && END_TIME !== -1 && slot[BEGIN_TIME] !== slot[END_TIME]
      ? slot[BEGIN_TIME] + " - " + slot[END_TIME]
      : BEGIN_TIME !== -1
      ? slot[BEGIN_TIME]
      : ""
  }\n${OWNER !== -1 ? slot[OWNER] : ""} ${NAME !== -1 ? slot[NAME] : ""}\n${
    LEADER !== -1 ? "‡∏ú‡∏ï. " + slot[LEADER] : ""
  }\n${LOCATION !== -1 ? "üìå " + slot[LOCATION] : ""}\n${
    MEMBER !== -1 ? "üèÉ " + slot[MEMBER] : ""
  }`;
}
function generateSlotInfoFlex(slot: Array<any>, shift: number, full = false): Array<any> {
  const beginTimeArray = slot[BEGIN_TIME].split(":").map((e: string) => Number.parseInt(e)),
    endTimeArray = slot[END_TIME].split(":").map((e: string) => Number.parseInt(e));
  const beginTimeDateObject = new Date(
      (beginTimeArray[0] * 60 + beginTimeArray[1] + shift) * 60000
    ),
    endTimeDateObject = new Date((endTimeArray[0] * 60 + endTimeArray[1] + shift) * 60000);
  slot[BEGIN_TIME] = beginTimeDateObject.toISOString().substring(11, 16);
  slot[END_TIME] = endTimeDateObject.toISOString().substring(11, 16);
  const leaderPhone =
    LEADER !== -1 && slot[LEADER]
      ? slot[LEADER].match(/(?:[-+() ]*\d){10,13}/gm).map(function (s) {
          return s.trim().replace("(", "").replace(")", "");
        })
      : [null];
  const callLeaderBtn = {
    type: "box",
    layout: "vertical",
    contents: [
      {
        type: "text",
        text: "‡πÇ‡∏ó‡∏£‡∏´‡∏≤ ‡∏ú‡∏ï.",
        adjustMode: "shrink-to-fit",
        size: "xs",
        align: "center",
        color: "#ffffff",
      },
    ],
    backgroundColor: "#c74444",
    cornerRadius: "sm",
    action: {
      type: "uri",
      uri: `tel:${leaderPhone[0]}`,
    },
    paddingAll: "xs",
  };
  const fullDetailBtn = {
    type: "box",
    layout: "vertical",
    contents: [
      {
        type: "text",
        text: "More detail",
        align: "center",
        adjustMode: "shrink-to-fit",
        size: "xs",
        color: "#ffffff",
      },
    ],
    backgroundColor: "#4490c7",
    cornerRadius: "sm",
    action: {
      type: "postback",
      label: "action",
      data: `slotDetail ${NUM !== -1 ? slot[NUM] : "0"}`,
    },
    paddingAll: "xs",
  };
  const slotHeader = {
    type: "box",
    layout: "horizontal",
    contents: [
      {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: NUM !== -1 ? "#" + slot[NUM] : "#0",
            weight: "bold",
            adjustMode: "shrink-to-fit",
            size: "xs",
          },
        ],
        backgroundColor: "#c9eb34",
        justifyContent: "center",
        flex: 0,
        paddingAll: "xs",
      },
      {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text:
              BEGIN_TIME !== -1 && END_TIME !== -1 && slot[BEGIN_TIME] !== slot[END_TIME]
                ? slot[BEGIN_TIME] + " - " + slot[END_TIME]
                : BEGIN_TIME !== -1
                ? slot[BEGIN_TIME]
                : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏ö‡∏∏",
            weight: "bold",
            align: "end",
            wrap: true,
            gravity: "center",
            color: shift > 0 ? "#ff1c1c" : shift < 0 ? "#ffff00" : undefined,
          },
        ],
      },
    ],
    paddingBottom: "none",
    paddingTop: "none",
    paddingEnd: "sm",
    paddingStart: "none",
  };
  const slotFooter = {
    type: "box",
    layout: "horizontal",
    contents: [callLeaderBtn, fullDetailBtn],
    paddingAll: "sm",
    spacing: "md",
  };
  const members = {
    type: "box",
    layout: "vertical",
    contents: [
      {
        type: "text",
        text: "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö",
        weight: "bold",
        decoration: "underline",
        size: "xs",
      },
      {
        type: "text",
        text: MEMBER !== -1 ? slot[MEMBER] : "unknown",
        wrap: true,
        size: "sm",
        maxLines: full ? 40 : 12,
      },
    ],
    paddingAll: "xs",
    paddingStart: "sm",
  };
  const slotTitle = [
    {
      type: "text",
      text: OWNER !== -1 && slot[OWNER] ? slot[OWNER] : "-",
      align: "center",
      wrap: true,
      weight: "bold",
      size: "sm",
    },
    {
      type: "text",
      text: NAME !== -1 && slot[NAME] ? slot[NAME] : "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠",
      align: "center",
      wrap: true,
      size: "sm",
    },
    {
      type: "separator",
      margin: "none",
    },
  ];
  const slotLeaderAndPlace = [
    {
      type: "text",
      text: "‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î",
      weight: "bold",
      decoration: "underline",
      size: "xs",
    },
    {
      type: "text",
      text: LEADER !== -1 && slot[LEADER] ? slot[LEADER] : "unknown",
      wrap: true,
      gravity: "top",
      size: "sm",
    },
    {
      type: "text",
      text: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
      weight: "bold",
      decoration: "underline",
      size: "xs",
    },
    {
      type: "text",
      text: LOCATION !== -1 && slot[LOCATION] ? slot[LOCATION] : "unknown",
      size: "sm",
      wrap: full,
    },
  ];
  // -----------Full Slot (3)-----------------------------------------------------------
  if (full) {
    return [
      {
        type: "bubble",
        size: "kilo",
        header: slotHeader,
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            ...slotTitle,
            {
              type: "box",
              layout: "vertical",
              contents: slotLeaderAndPlace,
              paddingStart: "sm",
              paddingEnd: "xs",
              margin: "sm",
              justifyContent: "center",
            },
          ],
          paddingAll: "xs",
          spacing: "xs",
          justifyContent: "space-between",
        },
        footer: {
          type: "box",
          layout: "horizontal",
          contents: [callLeaderBtn],
          paddingAll: "sm",
          spacing: "md",
        },
        styles: {
          header: {
            backgroundColor: "#aa77f7",
          },
          footer: {
            backgroundColor: "#aa77f7",
          },
        },
      },
      {
        type: "bubble",
        header: slotHeader,
        body: members,
        size: "kilo",
        styles: {
          header: {
            backgroundColor: "#aa77f7",
          },
        },
      },
      {
        type: "bubble",
        header: slotHeader,
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            {
              type: "text",
              text: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
              weight: "bold",
              decoration: "underline",
              size: "xs",
            },
            {
              type: "text",
              text: DETAILS !== -1 ? slot[DETAILS] : "-",
              wrap: true,
              size: "sm",
            },
          ],
          paddingAll: "xs",
          paddingStart: "sm",
        },
        size: "kilo",
        styles: {
          header: {
            backgroundColor: "#aa77f7",
          },
        },
      },
    ];
  }
  // ---------------2 Slots-------------------------------------------------------
  if (slot[MEMBER].split("\n").length > 1) {
    return [
      {
        type: "bubble",
        size: "micro",
        header: slotHeader,
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            ...slotTitle,
            {
              type: "box",
              layout: "vertical",
              contents: [
                ...slotLeaderAndPlace,
                {
                  type: "text",
                  text: "(‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏î‡∏π‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)",
                  size: "xxs",
                  style: "italic",
                  align: "center",
                  color: "#7c838f",
                },
              ],
              paddingStart: "sm",
              paddingEnd: "xs",
              margin: "sm",
              justifyContent: "center",
            },
          ],
          paddingAll: "xs",
          spacing: "xs",
          justifyContent: "space-between",
        },
        footer: slotFooter,
        styles: {
          header: {
            backgroundColor: "#fc9003",
          },
          footer: {
            backgroundColor: "#fc9003",
          },
        },
      },
      {
        type: "bubble",
        size: "micro",
        header: slotHeader,
        body: members,
        styles: {
          header: {
            backgroundColor: "#fc9003",
          },
        },
      },
    ];
  }
  // -----------1 Slot-----------------------------------------------------------
  return [
    {
      type: "bubble",
      size: "micro",
      header: slotHeader,
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          ...slotTitle,
          {
            type: "box",
            layout: "vertical",
            contents: [
              ...slotLeaderAndPlace,
              {
                type: "text",
                text: "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö",
                weight: "bold",
                decoration: "underline",
                size: "xs",
              },
              {
                type: "text",
                text: MEMBER !== -1 && slot[MEMBER] ? slot[MEMBER] : "unknown",
                size: "sm",
                wrap: true,
              },
            ],
            paddingStart: "sm",
            paddingEnd: "xs",
            margin: "sm",
            justifyContent: "center",
          },
        ],
        paddingAll: "xs",
        spacing: "xs",
        justifyContent: "space-between",
      },
      footer: slotFooter,
      styles: {
        header: {
          backgroundColor: "#fc9003",
        },
        footer: {
          backgroundColor: "#fc9003",
        },
      },
    },
  ];
}
function generatePlusProcessFlex(props: Array<any>) {
  const [duration, totalShift, atSlot, idx, beginTime, endTime, shift, sender] = props;
  let time = atSlot === idx ? endTime : beginTime;
  const timeArray = time.split(":").map((e: string) => Number.parseInt(e));
  const timeDateObject = new Date((timeArray[0] * 60 + timeArray[1] + shift) * 60000);
  time = timeDateObject.toISOString().substring(11, 16);
  return {
    type: "bubble",
    size: "kilo",
    header: {
      type: "box",
      layout: "horizontal",
      contents: [
        {
          type: "image",
          url: "https://cdn-icons-png.flaticon.com/512/1378/1378644.png",
          size: "xxs",
          flex: 0,
        },
        {
          type: "text",
          text: `${duration < 0 ? "" : "+"}${duration} ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà Slot #${atSlot}`,
          align: "center",
          color: duration < 0 ? "#000000" : "#ffffff",
          weight: "bold",
          wrap: true,
          gravity: "center",
        },
      ],
      paddingAll: "xs",
      spacing: "xs",
      paddingStart: "md",
      paddingTop: "sm",
    },
    body: {
      type: "box",
      layout: "vertical",
      contents: [
        {
          type: "box",
          layout: "horizontal",
          contents: [
            {
              type: "text",
              text: "‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
              size: "sm",
              flex: 0,
            },
            {
              type: "text",
              text: `${totalShift} ‡∏ô‡∏≤‡∏ó‡∏µ`,
              size: "sm",
              weight: "bold",
              align: "end",
              wrap: true,
            },
          ],
        },
        {
          type: "box",
          layout: "horizontal",
          contents: [
            {
              type: "text",
              text: `Slot #${atSlot} ${atSlot === idx ? "‡∏à‡∏ö" : "‡πÄ‡∏£‡∏¥‡πà‡∏°"}`,
              size: "sm",
              flex: 0,
            },
            {
              type: "text",
              text: time,
              size: "sm",
              weight: "bold",
              align: "end",
              wrap: true,
            },
          ],
        },
      ],
      spacing: "xs",
      justifyContent: "space-between",
      paddingAll: "xs",
      paddingStart: "lg",
      paddingEnd: "xl",
    },
    footer: {
      type: "box",
      layout: "horizontal",
      contents: [
        {
          type: "text",
          text: `‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢ ${sender}`,
          align: "start",
          size: "xs",
          wrap: true,
          flex: 55,
          gravity: "center",
        },
        {
          type: "box",
          layout: "vertical",
          contents: [
            {
              type: "text",
              text: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Slot #${atSlot}`,
              align: "center",
              adjustMode: "shrink-to-fit",
              size: "xxs",
              color: "#ffffff",
            },
          ],
          backgroundColor: "#4490c7",
          cornerRadius: "sm",
          action: {
            type: "postback",
            label: "Plus Process",
            data: `slotDetail ${atSlot}`,
          },
          paddingAll: "xs",
          justifyContent: "center",
          flex: 45,
        },
      ],
      paddingAll: "sm",
      paddingStart: "md",
      paddingEnd: "md",
      spacing: "xs",
    },
    styles: {
      header: {
        backgroundColor: duration < 0 ? "#ffff00" : "#fc0000",
      },
      footer: {
        backgroundColor: duration < 0 ? "#ffff54" : "#ff5454",
      },
    },
  };
}
function generatePlusProcessText(props: Array<number | string>) {
  const [duration, totalShift, atSlot, idx, beginTime, endTime, shift, sender] = props;
  return `üö®${duration < 0 ? "" : "+"}${duration} ‡∏ô‡∏≤‡∏ó‡∏µ ${
    totalShift === 0 ? "*Setzero*" : `‡∏£‡∏ß‡∏° ${totalShift} ‡∏ô‡∏≤‡∏ó‡∏µ`
  } ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà Slot #${atSlot} ‡∏ô‡πâ‡∏≤‡∏á‡∏±‡∏ö üö®\n‚åõSlot #${atSlot} ${
    atSlot === idx ? `‡∏à‡∏ö ${endTime}` : `‡πÄ‡∏£‡∏¥‡πà‡∏° ${beginTime} `
  } ${shift !== 0 ? `(${shift >= 0 ? "+" : ""}${shift})` : ""}\n‡∏™‡∏±‡πà‡∏á‡πÇ‡∏î‡∏¢ ${sender}`;
}
function helpFlex() {
  return [
    {
      type: "bubble",
      size: "kilo",
      header: {
        type: "box",
        layout: "horizontal",
        contents: [
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡∏´‡∏ô‡πâ‡∏≤ 1",
                weight: "bold",
                adjustMode: "shrink-to-fit",
                size: "xs",
              },
            ],
            backgroundColor: "#c9eb34",
            justifyContent: "center",
            flex: 0,
            paddingAll: "xs",
          },
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
                weight: "bold",
                align: "center",
                wrap: true,
                gravity: "center",
              },
            ],
          },
        ],
        paddingBottom: "none",
        paddingTop: "none",
        paddingEnd: "sm",
        paddingStart: "none",
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏à‡πâ‡∏á Slot ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£ +- Process",
                weight: "bold",
                decoration: "underline",
                size: "xs",
                wrap: true,
              },
              {
                type: "text",
                text: "- !start ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å Slot",
                wrap: true,
                gravity: "top",
                size: "sm",
              },
              {
                type: "text",
                text: "- !start <List ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢> ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡∏±‡πâ‡∏ô ‡πÜ\n‡πÄ‡∏ä‡πà‡∏ô !start plan coop ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏Å Slot ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ù‡πà‡∏≤‡∏¢‡πÅ‡∏ú‡∏ô‡∏Å‡∏±‡∏ö‡∏ù‡πà‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô",
                size: "sm",
                wrap: true,
              },
              {
                type: "text",
                text: "- !stop ‡∏´‡∏¢‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏à‡πâ‡∏á Slot ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£ +- Process",
                size: "sm",
                wrap: true,
              },
            ],
            paddingStart: "sm",
            paddingEnd: "xs",
            margin: "sm",
            justifyContent: "center",
          },
        ],
        paddingAll: "xs",
        spacing: "xs",
        justifyContent: "space-between",
      },
      styles: {
        header: {
          backgroundColor: "#66c8e3",
        },
        footer: {
          backgroundColor: "#fc9003",
        },
      },
    },
    {
      type: "bubble",
      size: "kilo",
      header: {
        type: "box",
        layout: "horizontal",
        contents: [
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡∏´‡∏ô‡πâ‡∏≤ 2",
                weight: "bold",
                adjustMode: "shrink-to-fit",
                size: "xs",
              },
            ],
            backgroundColor: "#c9eb34",
            justifyContent: "center",
            flex: 0,
            paddingAll: "xs",
          },
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á +- Process ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏¢",
                weight: "bold",
                align: "center",
                wrap: true,
                gravity: "center",
              },
            ],
          },
        ],
        paddingBottom: "none",
        paddingTop: "none",
        paddingEnd: "sm",
        paddingStart: "none",
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "1. !+ <minutes> now ‡∏ö‡∏ß‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà Slot ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô !+ 30 now",
            size: "xs",
            wrap: true,
          },
          {
            type: "text",
            text: "2. !+ <minutes> next ‡∏ö‡∏ß‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà Slot ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ\n‡πÄ‡∏ä‡πà‡∏ô !+ 15 next",
            wrap: true,
            size: "sm",
          },
          {
            type: "text",
            text: "3. !+ <minutes> <Slot No.> ‡∏ö‡∏ß‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà Slot ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏\n‡πÄ‡∏ä‡πà‡∏ô !+ 20 154",
            wrap: true,
            size: "sm",
          },
          {
            type: "text",
            text: "4. ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà !- ‡πÅ‡∏ó‡∏ô !+",
            wrap: true,
            size: "sm",
          },
        ],
        paddingAll: "xs",
        paddingStart: "sm",
      },
      styles: {
        header: {
          backgroundColor: "#66c8e3",
        },
      },
    },
    {
      type: "bubble",
      size: "kilo",
      header: {
        type: "box",
        layout: "horizontal",
        contents: [
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡∏´‡∏ô‡πâ‡∏≤ 3",
                weight: "bold",
                adjustMode: "shrink-to-fit",
                size: "xs",
              },
            ],
            backgroundColor: "#c9eb34",
            justifyContent: "center",
            flex: 0,
            paddingAll: "xs",
          },
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏",
                weight: "bold",
                align: "center",
                wrap: true,
                gravity: "center",
              },
            ],
          },
        ],
        paddingBottom: "none",
        paddingTop: "none",
        paddingEnd: "sm",
        paddingStart: "none",
      },
      body: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: "- ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏≤‡∏ü‡∏Ñ‡πà‡∏≤‡∏¢\n- ‡∏Å‡∏≤‡∏£ !start ‡πÄ‡∏â‡∏¢ ‡πÜ ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ù‡πà‡∏≤‡∏¢‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ä‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÇ‡∏î‡∏ô‡∏î‡∏±‡∏ô‡πÑ‡∏î‡πâ\n- ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á +- ‡πÇ‡∏õ‡∏£‡πÄ‡∏ã‡∏™‡πÅ‡∏ö‡∏ö‡∏°‡∏±‡πà‡∏ß ‡πÜ ‡∏à‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≥‡∏Ñ‡∏≤‡∏ç‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á +- ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
            wrap: true,
            size: "sm",
          },
        ],
        paddingAll: "xs",
        paddingStart: "sm",
      },
      footer: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "View Presentation",
                adjustMode: "shrink-to-fit",
                size: "xs",
                align: "center",
                color: "#ffffff",
              },
            ],
            backgroundColor: "#34c6eb",
            cornerRadius: "sm",
            action: {
              type: "uri",
              uri: "https://docs.google.com/presentation/d/1_wiHBiMs6Dx3n4XP0IYYMnl4n5VU9UoUBYdjTOZIOyc/edit?usp=sharing",
            },
            paddingAll: "xs",
          },
          {
            type: "box",
            layout: "vertical",
            contents: [
              {
                type: "text",
                text: "View Document",
                adjustMode: "shrink-to-fit",
                size: "xs",
                align: "center",
                color: "#ffffff",
              },
            ],
            backgroundColor: "#dbe366",
            cornerRadius: "sm",
            action: {
              type: "uri",
              uri: "https://docs.google.com/document/d/1rs-aK5OV9isvC4HrIy0Rb4q3cD8NZsXymxfuG3JBWhs/edit?usp=share_link",
            },
            paddingAll: "xs",
          },
        ],
        paddingAll: "sm",
        spacing: "md",
      },
      styles: {
        header: {
          backgroundColor: "#66c8e3",
        },
      },
    },
  ];
}
function helpText() {
  return "‡∏û‡∏¥‡∏°‡∏û‡πå !start ‡∏´‡∏£‡∏∑‡∏≠ !start ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô !start plan coop) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á Slot\n‡∏´‡∏£‡∏∑‡∏≠ !stop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° ‡πÜ ‡∏Å‡πá‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢‡∏¢‡∏¢ https://docs.google.com/document/d/1rs-aK5OV9isvC4HrIy0Rb4q3cD8NZsXymxfuG3JBWhs/edit?usp=sharing";
}
export {
  addReceiverReplyText,
  generateSlotInfoText,
  generatePlusProcessText,
  generatePlusProcessFlex,
  helpFlex,
  helpText,
  generateSlotInfoFlex,
};
